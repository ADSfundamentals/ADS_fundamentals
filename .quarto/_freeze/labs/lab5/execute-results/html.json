{
  "hash": "cfb7fd4468a155ca6451cf5032200d55",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab 5\"\n#output-file: \"lab5_answers.html\"\noutput-file: \"lab5.html\"\nparams:\n  answers: false\n---\n\nWe will use the following packages in this practical:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(magrittr)\nlibrary(ggplot2)\nlibrary(foreign)\nlibrary(kableExtra)\nlibrary(janitor)\nlibrary(readr)\n```\n:::\n\n\nIn this practical, you will perform regression analyses using `glm()` and inspect variables by plotting these variables, using `ggplot()`.\n\n---\n\n# Part 1: Logistic regression\n\nLogistic regression is a supervised learning algorithm that classifies data into categories, by predicting the probability that an observation falls into a particular category based on its features. In this tutorial we will consider binary classification, where we determine which of two categories a data point belongs to.\n\nThe logistic function can be described as:\n\n$$ P(y = 1|X) = sigmoid(z) = \\frac{1}{1+e^{-z}}   $$\nwhere\n\n$$ z = \\hat{\\beta_0} + \\hat{\\beta_1}x_1 + \\hat{\\beta_2}x_2 + ... + \\hat{\\beta_k}x_k $$\n$z$ is like the linear predictor in linear regression, but it is transformed by the sigmoid function so that results can be interpreted as probabilities (between 0 and 1). The probability is compared to a threshold to determine what class $y$ belongs to based on $X$. You can choose what this threshold is and it is context dependent. For example, if you are predicting the chances of recovery in a clinical trial you might set a very high threshold of 0.90. A common threshold for low-stakes research is 0.50. \n\nThe `glm()` function is used to specify several different models, among which the logistic regression model. The logistic regression model can be specified by setting the `family` argument to _\"binomial\"_. You can save a model in an object and request summary statistics with the `summary()` command. \n\nFor logistic regression, it important to know and check what category the predicted probabilities refer to, so you can interpret the model and it's coefficients correctly. If your outcome variable is coded as a factor, the `glm()` function predicts the 2nd category, which is by default the alphabetical latter one. For example, if the categories are coded as 0 and 1, the probability of belonging to \"1\" is predicted by the model. \n\nWhen a model is stored in an object you can ask for the coefficients _(model\\$coeffients)_, the predicted probabilities of belonging to the 'higher' category category _(model\\$fitted.values)_, and the aic _(model\\$aic)_. To investigate all additional model information that is stored in the object, check out the list of the model by selecting it in the environment-list.\n\n---\n\n## Working with odds and log-odds \n\nBefore we get started with logistic modelling it helps to understand how odds, log-odds, and probability are related. Essentially, they are all just different expressions of the same thing and converting between them involve simple formulas. \n\nCoefficients calculated using the `glm()` function returns log-odds by default. Most of us find it difficult to think in terms of log-odds, so instead we convert them to odds (or odds-ratios) using the `exp()` function. If we want to go from odds to log-odds, we just take the logarithm using `log()`. \n\nAn odds-ratio is the probability of success and is defined as $Odds = \\frac{P}{1-P}$, where $P$ is the probability of an event happening and $1-P$ is the probability that it does not happen. For example, if we have an 80% chance of a sunny day, then we have a 20% chance of a rainy day. The odds would then equal $\\frac{.80}{.20} = 4$, meaning the odds of a sunny day are 4 to 1. \nLet's consider this further with an example. \n\nThe code below creates a data frame called `data` with a column called `conc` showing the number of trials wherein different concentrations of the peptide-C protein inhibited the flow of current across a membrane. The `yes` column contains counts of trials where this occured.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data.frame(conc = c(0.1, 0.5, 1, 10, 20, 30, 50, 70, 80, 100, 150),\n                   no = c(7, 1, 10, 9, 2, 9, 13, 1, 1, 4, 3),\n                   yes = c(0, 0, 3, 4, 0, 6, 7, 0, 0, 1 ,7)\n                   ) \ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    conc no yes\n1    0.1  7   0\n2    0.5  1   0\n3    1.0 10   3\n4   10.0  9   4\n5   20.0  2   0\n6   30.0  9   6\n7   50.0 13   7\n8   70.0  1   0\n9   80.0  1   0\n10 100.0  4   1\n11 150.0  3   7\n```\n\n\n:::\n:::\n\n\n1. __Add the following variables to the dataset:__\n\n* **the total number of trials for each observation (i.e., the sum of the `no` and `yes` trials for each row)**\n* **the proportion of yes trials in each row (i.e. yes divided by the total)**\n* **the log-odds of inhibition for each row (i.e. the log-odds of `yes` vs `no`)**\n\n\n\n2. __Inspect the new columns. Do you notice anything unusual?__\n\n\n\n\n3. __Add a new column to your dataset containing the corrected odds.__\n\nYou can compute the value of this column using the following formulation of the log-odds:\n\n$$ log(odds) = log(\\frac{yes + 0.5} {no + 0.5}) $$\n\n\n\n4. __Fit a logistic regression model where:__\n\n* **`prop` is the outcome**\n* **`conc` is the only predictor**\n* **the number of total trials per row are used as weights (we need this because a different number of trials can go into defining each observation of `prop`)**\n\n**Interpret the slope estimate.**\n\n\n\n---\n\n## Titanic data\n\nYou will work with the `titanic` data set which you can find in the surfdrive folder, containing information on the fate of passengers on the infamous voyage. \n\n* `Survived`: this is the outcome variable that you are trying to predict, with 1 meaning a passenger survived and 0 meaning they did not\n* `Pclass`: this is the ticket class the passenger was travelling on, with 1, 2, and 3 representing 1st, 2nd and 3rd class respectively\n* `Age`: this is the age of the passenger in years\n* `Sex`: this is the sex of the passenger, either male or female\n\n5. __Read in the data from the \"titanic.csv\" file, selecting only the variables `Survived`, `Pclass`, `Sex` and `Age`. If necessary, correct the class of the variables.__\n\n\n\n\n6. __What relationships do you expect to find between the predictor variables and the outcome?__\n\n\n\n\n7. __Investigate how many passengers survived in each class. You can do this visually by creating a bar plot, or by using the `table()` function. Search `??table` for more information.__\n\n\n\n8. __Similarly, investigate the relationship between survival and sex by creating a bar plot and a table.__\n\n\n\n\n9. __Investigate the relationship between age and survival by creating a histogram of the age of survivors versus non-survivors.__\n\n\n\n\n---\n\n## No predictors\n\n10. __Specify a logistic regression model where \"Survived\" is the outcome and there are no predictors.__\n\n\n\n---\n\n## Binary predictor \n\n11. __Specify a logistic regression model where \"Survived\" is the outcome and \"Sex\" is the only predictor.__\n\n\n\n12. __What does the intercept mean? What are the odds and what are the log-odds of survival for males?__\n\n\n\n---\n\n## Categorical predictor (more than 2 categories)\n\n13. __Specify a logistic regression model where \"Survived\" is the outcome and \"Pclass\" is the only predictor.__\n\n\n\n14. __Which category is the reference group? What are their odds of survival?__\n\n\n\n15. __What are the chances of survival for 2nd and 3rd class passengers?__\n\n\n\n---\n\n## Continuous predictor\n\n16. __Specify a logistic regression model where \"Survived\" is the outcome and \"Age\" is the only predictor.__\n\n**Save this model as you will come back to it later.**\n\n\n\n17. __What does the intercept mean when there is a continuous predictor?__\n\n\n\n18. __How are the odds and log-odds interpreted for a continuous predictor?__\n\n\n\n---\n\n## Multinomial model with an interaction term\n\n19. __Specify a logistic regression model `Survived` is the outcome and `Pclass` plus an interaction between `Sex` and `Age` as the predictor.__\n\n**Save this model as we will return to it later.**\n\n\n\n20. __How is the significant interaction term interpreted in this model?__\n\n\n\n---\n\n# Part 2: Model fit \n\nModel selection is an important step and there are several metrics for assessing model fit to help us select the best performing model. We will use deviance and information criterion to compare the fit of two models you saved before: `fit1` and `fit2`. \n\n---\n\n## Deviance \n\n**Deviance** is measure of the goodness-of-fit in a GLM where lower deviance indicates a better fitting model. R reports two types of deviance:\n\n* **null deviance:** how well the outcome is predicted by the intercept-only model\n* **residual deviance:** how well the outcome is predicted by the model with the predictors added\n\n21. __Get the model summaries and indicate what the null and residual deviance are.__\n\n\n\nWe can use the `anova()` function to perform an analysis of deviance that compares the difference in deviances between competing models.  \n\n22. __Compare the fit of model 1 with the fit of model 2 using `anova() and `test = \"Chisq\"`.__\n\n\n\n---\n\n## Information criteria \n\n**AIC** is the *Akaike's Information Criterion*, a method for assessing model quality through comparison of related models. AIC is based on the deviance but introduces a penalty for more complex models. The number itself is not meaninful, and it is only useful when comparing models against one another. Like deviance, the model with the lowest AIC is best.\n\n23. __Use the `AIC()` function to get the AIC value for model 1 and model 2.__\n\n\n\n**BIC** is the Bayesian Information Criterion and is very similar to AIC, but penalises a complex model *more* than the AIC would. Complex models will have a larger score indicating worse fit. One difference to the AIC is that the probability of selecting the correct model with the BIC increases as the sample size of the training set increases. \n\n24. __Use the `BIC()` function to get the BIC value for model 1 and model 2.__\n\n\n\n25. __Which model should we proceed with?__\n\n\n\n---\n\n# Part 3: Predicted probabilites\n\nOften with logistic regression we are interested in how well our model can predict the outcome. The `predict()` function allows us to do this, taking the model and some data as its main arguments. Additionally, you can specify whether you want `predict()` to give you predictions as logit or probabilities. \n\nProceed using the model you selected in the previous question. \n\n26. __Use the `predict()` function to generate predicted probabilities for the multivariate logistic model. `predict()` takes the following arguments:__\n\n* **`object`, i.e. the logistic model**\n* **`newdata`, i.e. a data set where we want to predict the outcome  (we will use `titanic`)**\n* **`type`, i.e. can be `\"logit\"` for log-odds or `\"response\"` for probabilities (we will use `type = \"response\"`)**\n* **`se.fit`, i.e. set to `TRUE` to estimate the standard error of the probabilities**\n\n**Remember to save the output to an object.**\n\n\n27. __Add the predicted probabilities and standard errors to the data set.__\n\n\n\n24. __Calculate the confidence intervals for the predicted probabilities and add them to the data.__\n\n\n\n---\n",
    "supporting": [
      "lab5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}