{"title":"Lab 6","markdown":{"yaml":{"title":"Lab 6","output-file":"lab6.html","params":{"answers":false}},"headingText":"Part 1: Repeat from last week","containsRefs":false,"markdown":"\n\n\nWe will use the following packages in this practical:\n\n* `dplyr` for manipulation\n* `magrittr` for piping\n* `readr` for reading data\n* `ggplot` for plotting\n* `kableExtra` for tables\n* `library(pROC)`, `library(regclass)`, and `library(caret)` for model diagnostics\n\n```{r, message = FALSE, warning = FALSE}\nlibrary(dplyr)\nlibrary(magrittr)\nlibrary(ggplot2)\nlibrary(kableExtra)\nlibrary(readr)\nlibrary(pROC)\nlibrary(regclass)\nlibrary(caret)\n```\n\n## Loading the data\n\nIn this practical, you will perform logistic regression analyses again using `glm()` and discuss model assumptions and diagnostics `titanic` data set.\n\n**1. Read in the data from the \"titanic.csv\" file, which we also used for the previous practical.**\n\n```{r, include=params$answers}\n# Load in the data\ntitanic <- read_csv(\"titanic.csv\") %>% \n  mutate(Survived = as.factor(Survived),\n         Sex = as.factor(Sex),\n         Pclass = as.factor(Pclass))\n\nstr(titanic)\n\n#I use `readr::read_csv` to import the titanic training dataset, piping the input through `mutate_if` functions to correct the class. *\n\n#As a reminder, the variables are:*\n#`Survived` - passenger's survival status where 0 indicates did not survive, 1 indicats survived*\n#`Pclass` - 1st, 2nd, and 3rd class tickets*\n#`Age` - passenger age in years*\n#`Sex` - passenger sex as male or female*\n\n\n```\n\n## Logistic regression \n\n2. __Fit the following two logistic regression models and save them as `fit1` and `fit2`:__\n\n* **`Survived ~ Pclass`**\n* **`Survived ~ Age + Pclass*Sex`**\n\n\n```{r, include=params$answers}\nfit1 <- glm(Survived ~ Pclass, \n            family = binomial, \n            data = titanic)\n\nfit2 <- glm(Survived ~ Age + Sex*Pclass, \n            family = binomial, \n            data = titanic)\n\n```\n\n# Part 2: Model assumptions\n\n## Binary dependent variable \n\nThe first outcome in a logistic regression is that the outcome should be binary and therefore follow a binomial distribution. This is easy to check: you just need to be sure that the outcome can only take one of two responses. You can plot the responses of the outcome variable to visually check this if you want. In our case, the possible outcomes are:\n\n* Survived (coded 1)\n* Did not survive (coded 0)\n\n3. __Visualise the responses of the outcome variable `Survived` using `ggplot()`.__\n\n```{r, include=params$answers}\ntitanic %>% \n  ggplot(aes(x = Survived, fill = Survived)) +\n  geom_bar() +\n  labs(x = \"Survival\",\n       y = \"Count\",\n       title = \"Distribution of the outcome variable\") +\n  theme_bw()\n\n# You can see that there are indeed only two outcomes for `Survived`, so our outcome follows a binomial distribution.\n```\n\n## Balanced outcomes\n\nIf you are using logistic regression to make predictions/classifications then the accuracy will be affected by imbalance in the outcome classes. Notice that in the plot you just made there are more people who did not survive than who did survive. A possible consequence is reduced accuracy in classification of survivors. \n\nA certain amount of imbalance is expected and can be handled well by the model in most cases. The effects of this imbalance is context-dependent. Some solutions to serious class imbalance are down-sampling or weighting the outcomes to balance the importance placed on the outcomes by the model. \n\n## Sufficiently large sample size\n\nSample size in logistic regression is a complex issue, but some suggest that it is ideal to have 10 cases per candidate predictor in your model. The minimum number of cases to include is $N = \\frac{10*k} {p}$, where $k$ is the number of predictors and $p$ is the smallest proportion of negative or positive cases in the population. \n\n4. __Calculate the minimum number of positive cases needed in the model `fit1`.__\n\n```{r, include=params$answers}\n#First we need to get the proportion of people that survived in our sample, which is 0.38*\n\ntitanic %>% \n  count(Survived) %>% \n  mutate(prop = n / sum(n))\n\n#Now we can plug this into our formula to get the minimum number of positive cases. \nssize_cal <- function(k, p){\n  round((10*k)/p)\n}\n\nssize_cal(2, 0.38)\n\n#We have many more than this in our data so the sample size is large enough.*\n```\n\n## Predictor matrix is full-rank\n\nYou learned about this assumption in the linear regression practicals, but to remind you:\n\n* there need to be more observations than predictors (n > P)\n* there should be no multicollinearity among the linear predictors\n\n5. __Check that there is no multicollinearity in the logistic model.__\n\n```{r, include=params$answers}\n#VIF(fit1)\nVIF(fit2)\n\n# Like with linear regression we can use the VIF. A VIV > 10 indicates high multicollinearity. Remember that for continuous variables we should inspect the \"GVIF\" column. For categorical predictors we should check the \"GVIF^(1/(2*Df))\" column.\n\n# In model 1, the VIF cannot be determined since there is only a single predictor.\n```\n\n## Continuous predictors are linearly related to the $logit(\\pi)$\n\nLogistic regression models assume a linear relationship between predictor variables and the logit of the outcome variable. This assumption is mainly concerned with continuous predictors. Since we only have one continuous predictor (`Age`) we can plot the relationship between `Age` and the logit of `Survived`. \n\n6. __Get the predicted values of `fit2` on the logit scale and bind them to the `titanic` data.__\n\n```{r, include=params$answers}\n# We do this using the `predict()` function, but specifying `type = \"link\"` this time. \n\ntitanic$logit <- predict(fit2, type = \"link\")\n```\n\n7. __Plot the relationship between `Age` and `logit` and interpret it.__\n\n```{r, include=params$answers}\ntitanic %>% \nggplot(aes(Age, logit))+\n  geom_point(size = 0.5, alpha = 0.5) +\n  geom_smooth(method = \"glm\") + \n  theme_bw()\n\n# Age does appear to be negatively linearly related to the predicted logit values.\n```\n\n8. __How should we deal with variables that are not linearly related to the logit?__\n\n```{r, include=params$answers}\n# This differs per situation. One solution can be to try to apply transformations to the variables. \n```\n\n## No influential values or outliers\n\nInfluential values are extreme individual data points that can affect the fit of the logistic regression model. They can be visualised using Cook's distance and the Residuals vs Leverage plot. \n\n9. __Use the `plot()` function to visualise the outliers and influential points of `fit2`.__\n\n**Hint: you need to specify the correct plot with the `which` argument. Check the lecture slides or search `??plot` if you are unsure.**\n\n```{r, include=params$answers}\n# There are two relevant plots to check for influential values. The first is Cook's distance plot, which shows the top 3 largest values. Note that not all outliers are influential cases, so we should also inspect the Residuals vs Leverage plot, which shows actual influential cases.\n\n# You can get both of these plots by specifying `which = c(4, 5)` in the `plot()` function.\n\nplot(fit2, which = c(4, 5))\n```\n\n10. __Are there any influential cases in the Leverage vs Residuals plot? If so, what would you do?__\n\n```{r, include=params$answers}\n# Leverage is the extent that the model coefficients will change if a particular observation is removed from the dataset. Points that fall outside of the red dashed line (Cook's distance) are influential.*\n\n# There are no values which fall outside of the red dashed lines.* \n\n# If there are influential observations, you can remove them, replace them with a more realistic value, or keep them as they are and make note of it when reporting results.* \n```\n\n## Differences to linear regressoin\n\nLastly, it is important to note that the assumptions of a linear regression do not *all* map to logistic regression. In logistic regression, we do not need:\n\n* constant, finite error variance\n* normally distributed errors\n\nHowever, deviance residuals are useful for determining if the individual points are not fit well by the model. \n\n*Hint: you can use some of the code from the lecture for the next few questions.*\n\n11. __Use the `resid()` function to get the deviance residuals for `fit2`.__\n\n```{r, include=params$answers}\ndr <- resid(fit2, type = \"deviance\")\n```\n\n12. __Compute the predicted logit values for the model.__\n\n```{r, include=params$answers}\neta <- predict(fit2, type = \"link\")\n```\n\n13. __Plot the deviance residuals.__\n\n```{r, message = FALSE ,include=params$answers}\n# The first step is to bind the deviance residuals to the logit values.\n\ndr_data <- data.frame(residuals = dr, \n                      eta = rep(eta, 3))\n\n# Now we can plot the data with the residuals on the y-axis, and the logit values on the x-axis.* \n\nggplot(dr_data, aes(x = eta, y = residuals)) + \n  geom_point(alpha = 0.35) +\n  geom_smooth(se = FALSE) +\n  labs(title = \"Deviance residuals\") +\n  theme_bw()\n```\nPearson residuals can also be useful in logistic regression. They measure deviations between the observed and fit1ted values. Pearson residuals are easier to plot than deviance residuals as the `plot()` function can be used. \n\n14. __Plot the pearson residuals for the model.__\n\n```{r, include=params$answers}\nplot(fit2, which = 1)\n```\n\n\n# Part 3: Predicted probabilities\n\nIn last week's practical, you learned how to use the `predict()` function to calculate predicted probabilites using the models. This week we will create predicted probabilities for the final two models from last week compare the results by using the confusion matrix. \n\n15. __Use the `predict()` function to get model predicted probabilities for `fit1` and `fit2`.__\n\n```{r, include=params$answers}\n# Remember that `type = \"response\"` returns values on the odds-ratio scale.\n\nprob1 <- predict(fit1, type = \"response\")\n\nprob2 <- predict(fit2, type = \"response\")\n```\n\n16. __Create model predicted classifications for survival, for `fit1` and `fit2`.__\n\n```{r, include=params$answers}\n\npred1 <- ifelse(prob1 > 0.5, 1, 0)\n\npred2 <- ifelse(prob2 > 0.5, 1, 0)\n```\n\n## Confusion matrix \n\nYou can read about the confusion matrix on [this Wikipedia page](https://en.wikipedia.org/w/index.php?title=Sensitivity_and_specificity&oldid=862159646#Confusion_matrix). This section tells you how to get some useful metrics from the confusion matrix to evaluate model performance.\n\n17. __Create two confusion matrices (one each for each model) using the classifications from the previous question. You can use the `table()` function, providing the modeled outcome as the `true` parameter and the classifications as the `pred` parameter.__\n\n```{r, include=params$answers}\n# The confusion matrix can be interpreted as follows:\n\n# True positives (bottom right) - correctly predicting people that survived\n# True negatives (top left) - correctly predicting people that did not survive\n# False positives (bottom left) - predicted people survived, when they did not\n# False negatives (top right) - predicting people did not survived, but they did\n\ncm1 <- table(pred = pred1, true = titanic$Survived)\ncm2 <- table(pred = pred2, true = titanic$Survived)\n\ncm1\ncm2\n```\n\n```{r, include=params$answers}\n# Note: the structure of the confusion matrix depends on the order in which you supply the outcome (i.e., if 0 and 1 were swapped, or if the predicted and true values are switched in rows and columns. \n\n# A third confusion matrix is given in which the order is changed. Always make sure that you read the confusion matrix carefully, so that you notice deviating structures. \n\ntable(true = titanic$Survived, pred = pred2)\n```\n\n\n18. __Based on the confusion matrices, which model do you think makes better predictions?__\n\n```{r, include=params$answers}\n# The second model makes more correct predictions according to the confusion matrix:\n\n# There are 505 correct true negative predictions, and 199 correct true positive predictions from model 2.\n# There are 469 correct true negative predictions and 136 true positive predictions from model 1 by comparison.\n\n# The first model makes more incorrect predictions too:*\n\n# There are 143 false negative predictions and 44 false positive predictions from model 2\n# There are 206 false negative predictions and 80 false positive predictions from model 1\n```\n\n19. __Calculate the accuracy, sensitivity, and specificity, false positive rate, positive and negative predictive values from the confusion matrix of the model that makes the best predictions.__\n\n```{r, include=params$answers}\n# First you need to extract the true negative, false negative, true positive, and false positive values from the confusion matrix.\nTN <- cm2[1, 1]\nFN <- cm2[1, 2]\nTP <- cm2[2, 2]\nFP <- cm2[2, 1]\n\n# Then you can use these values to calculate the metric asked for.\ntibble(\n  ACCURACY = (TP + TN) / sum(cm2),\n  SENSITIVITY = TP / (TP + FN),\n  SPECIFICITY = TN / (TN + FP),\n  FPR = FP / (TN + FP),\n  PPV = TP / (TP + FP),\n  NPV = TN / (TN + FN)\n  )\n```\n\n20. __Explain what the difference metrics mean in substantive terms?__\n\n```{r, include=params$answers}\n# Model accuracy is 0.79, meaning that 79% are correctly classified.\n\n# Model sensitivity is 0.58, meaning that if the passenger did survive, there is a 58% chance the model will detect this.\n\n# Model specificity is 0.92, meaning that if the passenger did not survive is an 92% chance the model will detect this.\n\n# Model FPR is 0.08, meaning that if a passenger in reality did not survive, there is a 8% chance that the model predicts this passenger as surviving.\n\n# Model PPV is 0.82, meaning that if a passenger is predicted as surviving, there is a 82% chance that this passenger indeed survived.\n\n# Model NPV is 0.78, meaning that if the passenger predicted as not surviving, there is a 78% chance that this passenger indeed did not survive.\n```\n\n21. __What does it mean for a model to have such low specificity, but high sensitivity?__\n\n```{r, include=params$answers}\n# Sensitivity and specificity are inversely proportioned. This means that as one increases, the other will decrease.\n\n# In our example we have moderate sensitivity, and very high specificity. High specificity means that there are few passengers predicted as not surviving when in reality they did survive. A moderate sensitivity means that relatively more passengers were predicted as surviving when in reality they did not survive. \n\n```\n\nThe `confusionMatrix()` function from the `caret` package can do a lot of this for us. The function takes three arguments:\n\n* `data` - a vector of predicted classes (in factor form)\n* `reference` - a vector of true classes (in factor from)\n* `positive` - a character string indicating the 'positive' outcome. If not specified, the confusion matrix assumes that the first specified category is the positive outcome.\n\nYou can type `??confusionMatrix` into the console to learn more. \n\n```{r, include=params$answers}\nconfusionMatrix(as.factor(pred2), \n                reference = titanic$Survived, \n                positive = \"1\")\n```\n\n","srcMarkdownNoYaml":"\n\n# Part 1: Repeat from last week \n\nWe will use the following packages in this practical:\n\n* `dplyr` for manipulation\n* `magrittr` for piping\n* `readr` for reading data\n* `ggplot` for plotting\n* `kableExtra` for tables\n* `library(pROC)`, `library(regclass)`, and `library(caret)` for model diagnostics\n\n```{r, message = FALSE, warning = FALSE}\nlibrary(dplyr)\nlibrary(magrittr)\nlibrary(ggplot2)\nlibrary(kableExtra)\nlibrary(readr)\nlibrary(pROC)\nlibrary(regclass)\nlibrary(caret)\n```\n\n## Loading the data\n\nIn this practical, you will perform logistic regression analyses again using `glm()` and discuss model assumptions and diagnostics `titanic` data set.\n\n**1. Read in the data from the \"titanic.csv\" file, which we also used for the previous practical.**\n\n```{r, include=params$answers}\n# Load in the data\ntitanic <- read_csv(\"titanic.csv\") %>% \n  mutate(Survived = as.factor(Survived),\n         Sex = as.factor(Sex),\n         Pclass = as.factor(Pclass))\n\nstr(titanic)\n\n#I use `readr::read_csv` to import the titanic training dataset, piping the input through `mutate_if` functions to correct the class. *\n\n#As a reminder, the variables are:*\n#`Survived` - passenger's survival status where 0 indicates did not survive, 1 indicats survived*\n#`Pclass` - 1st, 2nd, and 3rd class tickets*\n#`Age` - passenger age in years*\n#`Sex` - passenger sex as male or female*\n\n\n```\n\n## Logistic regression \n\n2. __Fit the following two logistic regression models and save them as `fit1` and `fit2`:__\n\n* **`Survived ~ Pclass`**\n* **`Survived ~ Age + Pclass*Sex`**\n\n\n```{r, include=params$answers}\nfit1 <- glm(Survived ~ Pclass, \n            family = binomial, \n            data = titanic)\n\nfit2 <- glm(Survived ~ Age + Sex*Pclass, \n            family = binomial, \n            data = titanic)\n\n```\n\n# Part 2: Model assumptions\n\n## Binary dependent variable \n\nThe first outcome in a logistic regression is that the outcome should be binary and therefore follow a binomial distribution. This is easy to check: you just need to be sure that the outcome can only take one of two responses. You can plot the responses of the outcome variable to visually check this if you want. In our case, the possible outcomes are:\n\n* Survived (coded 1)\n* Did not survive (coded 0)\n\n3. __Visualise the responses of the outcome variable `Survived` using `ggplot()`.__\n\n```{r, include=params$answers}\ntitanic %>% \n  ggplot(aes(x = Survived, fill = Survived)) +\n  geom_bar() +\n  labs(x = \"Survival\",\n       y = \"Count\",\n       title = \"Distribution of the outcome variable\") +\n  theme_bw()\n\n# You can see that there are indeed only two outcomes for `Survived`, so our outcome follows a binomial distribution.\n```\n\n## Balanced outcomes\n\nIf you are using logistic regression to make predictions/classifications then the accuracy will be affected by imbalance in the outcome classes. Notice that in the plot you just made there are more people who did not survive than who did survive. A possible consequence is reduced accuracy in classification of survivors. \n\nA certain amount of imbalance is expected and can be handled well by the model in most cases. The effects of this imbalance is context-dependent. Some solutions to serious class imbalance are down-sampling or weighting the outcomes to balance the importance placed on the outcomes by the model. \n\n## Sufficiently large sample size\n\nSample size in logistic regression is a complex issue, but some suggest that it is ideal to have 10 cases per candidate predictor in your model. The minimum number of cases to include is $N = \\frac{10*k} {p}$, where $k$ is the number of predictors and $p$ is the smallest proportion of negative or positive cases in the population. \n\n4. __Calculate the minimum number of positive cases needed in the model `fit1`.__\n\n```{r, include=params$answers}\n#First we need to get the proportion of people that survived in our sample, which is 0.38*\n\ntitanic %>% \n  count(Survived) %>% \n  mutate(prop = n / sum(n))\n\n#Now we can plug this into our formula to get the minimum number of positive cases. \nssize_cal <- function(k, p){\n  round((10*k)/p)\n}\n\nssize_cal(2, 0.38)\n\n#We have many more than this in our data so the sample size is large enough.*\n```\n\n## Predictor matrix is full-rank\n\nYou learned about this assumption in the linear regression practicals, but to remind you:\n\n* there need to be more observations than predictors (n > P)\n* there should be no multicollinearity among the linear predictors\n\n5. __Check that there is no multicollinearity in the logistic model.__\n\n```{r, include=params$answers}\n#VIF(fit1)\nVIF(fit2)\n\n# Like with linear regression we can use the VIF. A VIV > 10 indicates high multicollinearity. Remember that for continuous variables we should inspect the \"GVIF\" column. For categorical predictors we should check the \"GVIF^(1/(2*Df))\" column.\n\n# In model 1, the VIF cannot be determined since there is only a single predictor.\n```\n\n## Continuous predictors are linearly related to the $logit(\\pi)$\n\nLogistic regression models assume a linear relationship between predictor variables and the logit of the outcome variable. This assumption is mainly concerned with continuous predictors. Since we only have one continuous predictor (`Age`) we can plot the relationship between `Age` and the logit of `Survived`. \n\n6. __Get the predicted values of `fit2` on the logit scale and bind them to the `titanic` data.__\n\n```{r, include=params$answers}\n# We do this using the `predict()` function, but specifying `type = \"link\"` this time. \n\ntitanic$logit <- predict(fit2, type = \"link\")\n```\n\n7. __Plot the relationship between `Age` and `logit` and interpret it.__\n\n```{r, include=params$answers}\ntitanic %>% \nggplot(aes(Age, logit))+\n  geom_point(size = 0.5, alpha = 0.5) +\n  geom_smooth(method = \"glm\") + \n  theme_bw()\n\n# Age does appear to be negatively linearly related to the predicted logit values.\n```\n\n8. __How should we deal with variables that are not linearly related to the logit?__\n\n```{r, include=params$answers}\n# This differs per situation. One solution can be to try to apply transformations to the variables. \n```\n\n## No influential values or outliers\n\nInfluential values are extreme individual data points that can affect the fit of the logistic regression model. They can be visualised using Cook's distance and the Residuals vs Leverage plot. \n\n9. __Use the `plot()` function to visualise the outliers and influential points of `fit2`.__\n\n**Hint: you need to specify the correct plot with the `which` argument. Check the lecture slides or search `??plot` if you are unsure.**\n\n```{r, include=params$answers}\n# There are two relevant plots to check for influential values. The first is Cook's distance plot, which shows the top 3 largest values. Note that not all outliers are influential cases, so we should also inspect the Residuals vs Leverage plot, which shows actual influential cases.\n\n# You can get both of these plots by specifying `which = c(4, 5)` in the `plot()` function.\n\nplot(fit2, which = c(4, 5))\n```\n\n10. __Are there any influential cases in the Leverage vs Residuals plot? If so, what would you do?__\n\n```{r, include=params$answers}\n# Leverage is the extent that the model coefficients will change if a particular observation is removed from the dataset. Points that fall outside of the red dashed line (Cook's distance) are influential.*\n\n# There are no values which fall outside of the red dashed lines.* \n\n# If there are influential observations, you can remove them, replace them with a more realistic value, or keep them as they are and make note of it when reporting results.* \n```\n\n## Differences to linear regressoin\n\nLastly, it is important to note that the assumptions of a linear regression do not *all* map to logistic regression. In logistic regression, we do not need:\n\n* constant, finite error variance\n* normally distributed errors\n\nHowever, deviance residuals are useful for determining if the individual points are not fit well by the model. \n\n*Hint: you can use some of the code from the lecture for the next few questions.*\n\n11. __Use the `resid()` function to get the deviance residuals for `fit2`.__\n\n```{r, include=params$answers}\ndr <- resid(fit2, type = \"deviance\")\n```\n\n12. __Compute the predicted logit values for the model.__\n\n```{r, include=params$answers}\neta <- predict(fit2, type = \"link\")\n```\n\n13. __Plot the deviance residuals.__\n\n```{r, message = FALSE ,include=params$answers}\n# The first step is to bind the deviance residuals to the logit values.\n\ndr_data <- data.frame(residuals = dr, \n                      eta = rep(eta, 3))\n\n# Now we can plot the data with the residuals on the y-axis, and the logit values on the x-axis.* \n\nggplot(dr_data, aes(x = eta, y = residuals)) + \n  geom_point(alpha = 0.35) +\n  geom_smooth(se = FALSE) +\n  labs(title = \"Deviance residuals\") +\n  theme_bw()\n```\nPearson residuals can also be useful in logistic regression. They measure deviations between the observed and fit1ted values. Pearson residuals are easier to plot than deviance residuals as the `plot()` function can be used. \n\n14. __Plot the pearson residuals for the model.__\n\n```{r, include=params$answers}\nplot(fit2, which = 1)\n```\n\n\n# Part 3: Predicted probabilities\n\nIn last week's practical, you learned how to use the `predict()` function to calculate predicted probabilites using the models. This week we will create predicted probabilities for the final two models from last week compare the results by using the confusion matrix. \n\n15. __Use the `predict()` function to get model predicted probabilities for `fit1` and `fit2`.__\n\n```{r, include=params$answers}\n# Remember that `type = \"response\"` returns values on the odds-ratio scale.\n\nprob1 <- predict(fit1, type = \"response\")\n\nprob2 <- predict(fit2, type = \"response\")\n```\n\n16. __Create model predicted classifications for survival, for `fit1` and `fit2`.__\n\n```{r, include=params$answers}\n\npred1 <- ifelse(prob1 > 0.5, 1, 0)\n\npred2 <- ifelse(prob2 > 0.5, 1, 0)\n```\n\n## Confusion matrix \n\nYou can read about the confusion matrix on [this Wikipedia page](https://en.wikipedia.org/w/index.php?title=Sensitivity_and_specificity&oldid=862159646#Confusion_matrix). This section tells you how to get some useful metrics from the confusion matrix to evaluate model performance.\n\n17. __Create two confusion matrices (one each for each model) using the classifications from the previous question. You can use the `table()` function, providing the modeled outcome as the `true` parameter and the classifications as the `pred` parameter.__\n\n```{r, include=params$answers}\n# The confusion matrix can be interpreted as follows:\n\n# True positives (bottom right) - correctly predicting people that survived\n# True negatives (top left) - correctly predicting people that did not survive\n# False positives (bottom left) - predicted people survived, when they did not\n# False negatives (top right) - predicting people did not survived, but they did\n\ncm1 <- table(pred = pred1, true = titanic$Survived)\ncm2 <- table(pred = pred2, true = titanic$Survived)\n\ncm1\ncm2\n```\n\n```{r, include=params$answers}\n# Note: the structure of the confusion matrix depends on the order in which you supply the outcome (i.e., if 0 and 1 were swapped, or if the predicted and true values are switched in rows and columns. \n\n# A third confusion matrix is given in which the order is changed. Always make sure that you read the confusion matrix carefully, so that you notice deviating structures. \n\ntable(true = titanic$Survived, pred = pred2)\n```\n\n\n18. __Based on the confusion matrices, which model do you think makes better predictions?__\n\n```{r, include=params$answers}\n# The second model makes more correct predictions according to the confusion matrix:\n\n# There are 505 correct true negative predictions, and 199 correct true positive predictions from model 2.\n# There are 469 correct true negative predictions and 136 true positive predictions from model 1 by comparison.\n\n# The first model makes more incorrect predictions too:*\n\n# There are 143 false negative predictions and 44 false positive predictions from model 2\n# There are 206 false negative predictions and 80 false positive predictions from model 1\n```\n\n19. __Calculate the accuracy, sensitivity, and specificity, false positive rate, positive and negative predictive values from the confusion matrix of the model that makes the best predictions.__\n\n```{r, include=params$answers}\n# First you need to extract the true negative, false negative, true positive, and false positive values from the confusion matrix.\nTN <- cm2[1, 1]\nFN <- cm2[1, 2]\nTP <- cm2[2, 2]\nFP <- cm2[2, 1]\n\n# Then you can use these values to calculate the metric asked for.\ntibble(\n  ACCURACY = (TP + TN) / sum(cm2),\n  SENSITIVITY = TP / (TP + FN),\n  SPECIFICITY = TN / (TN + FP),\n  FPR = FP / (TN + FP),\n  PPV = TP / (TP + FP),\n  NPV = TN / (TN + FN)\n  )\n```\n\n20. __Explain what the difference metrics mean in substantive terms?__\n\n```{r, include=params$answers}\n# Model accuracy is 0.79, meaning that 79% are correctly classified.\n\n# Model sensitivity is 0.58, meaning that if the passenger did survive, there is a 58% chance the model will detect this.\n\n# Model specificity is 0.92, meaning that if the passenger did not survive is an 92% chance the model will detect this.\n\n# Model FPR is 0.08, meaning that if a passenger in reality did not survive, there is a 8% chance that the model predicts this passenger as surviving.\n\n# Model PPV is 0.82, meaning that if a passenger is predicted as surviving, there is a 82% chance that this passenger indeed survived.\n\n# Model NPV is 0.78, meaning that if the passenger predicted as not surviving, there is a 78% chance that this passenger indeed did not survive.\n```\n\n21. __What does it mean for a model to have such low specificity, but high sensitivity?__\n\n```{r, include=params$answers}\n# Sensitivity and specificity are inversely proportioned. This means that as one increases, the other will decrease.\n\n# In our example we have moderate sensitivity, and very high specificity. High specificity means that there are few passengers predicted as not surviving when in reality they did survive. A moderate sensitivity means that relatively more passengers were predicted as surviving when in reality they did not survive. \n\n```\n\nThe `confusionMatrix()` function from the `caret` package can do a lot of this for us. The function takes three arguments:\n\n* `data` - a vector of predicted classes (in factor form)\n* `reference` - a vector of true classes (in factor from)\n* `positive` - a character string indicating the 'positive' outcome. If not specified, the confusion matrix assumes that the first specified category is the positive outcome.\n\nYou can type `??confusionMatrix` into the console to learn more. \n\n```{r, include=params$answers}\nconfusionMatrix(as.factor(pred2), \n                reference = titanic$Survived, \n                positive = \"1\")\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"lab6.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","editor":"visual","theme":["lumen"],"title":"Lab 6","params":{"answers":false}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}